# Generated by Django 5.2.6 on 2025-10-23 07:26

from django.db import migrations


def migrate_notifications_forward(apps, schema_editor):
    """
    Migrate notifications from custom Notification model to django-notifications-hq.

    Field mapping:
    - recipient → recipient (same)
    - actor → actor (same)
    - submission → target (GenericForeignKey to SubmittedContribution)
    - notification_type → verb
    - message → description
    - data → data (same)
    - unread → unread (same)
    - created_at → timestamp
    """
    # Get models
    OldNotification = apps.get_model('contributions', 'Notification')
    NewNotification = apps.get_model('notifications', 'Notification')
    SubmittedContribution = apps.get_model('contributions', 'SubmittedContribution')
    User = apps.get_model('users', 'User')
    ContentType = apps.get_model('contenttypes', 'ContentType')

    # Get ContentTypes
    submission_ct = ContentType.objects.get(
        app_label='contributions',
        model='submittedcontribution'
    )
    user_ct = ContentType.objects.get(
        app_label='users',
        model='user'
    )

    # Get or create a system user for notifications without an actor
    # Use the first superuser, or create a placeholder
    system_user = User.objects.filter(is_staff=True).first()
    if not system_user:
        print("Warning: No staff user found to use as system actor for notifications")
        return  # Skip migration if no suitable user exists

    # Counter for tracking
    migrated_count = 0

    # Iterate through all old notifications
    for old_notif in OldNotification.objects.all():
        # For notifications without an actor, use the system user
        actor_to_use = old_notif.actor if old_notif.actor else system_user

        # Create new notification with mapped fields
        # Actor is a GenericForeignKey, so we need actor_content_type and actor_object_id
        NewNotification.objects.create(
            recipient=old_notif.recipient,
            actor_content_type=user_ct,
            actor_object_id=str(actor_to_use.id),
            verb=old_notif.notification_type,  # 'accepted', 'rejected', 'more_info'
            description=old_notif.message,
            target_content_type=submission_ct,
            target_object_id=str(old_notif.submission.id),  # UUID as string
            data=old_notif.data,
            unread=old_notif.unread,
            timestamp=old_notif.created_at,
        )
        migrated_count += 1

    if migrated_count > 0:
        print(f"Successfully migrated {migrated_count} notifications to django-notifications-hq")


def migrate_notifications_reverse(apps, schema_editor):
    """
    Reverse migration: copy notifications back from django-notifications-hq to custom model.
    This is for rollback purposes.
    """
    OldNotification = apps.get_model('contributions', 'Notification')
    NewNotification = apps.get_model('notifications', 'Notification')
    SubmittedContribution = apps.get_model('contributions', 'SubmittedContribution')
    ContentType = apps.get_model('contenttypes', 'ContentType')

    # Get ContentType for SubmittedContribution
    submission_ct = ContentType.objects.get(
        app_label='contributions',
        model='submittedcontribution'
    )

    # Find all notifications that have SubmittedContribution as target
    for new_notif in NewNotification.objects.filter(target_content_type=submission_ct):
        # Get the submission by UUID
        try:
            submission = SubmittedContribution.objects.get(id=new_notif.target_object_id)
        except SubmittedContribution.DoesNotExist:
            print(f"Warning: Submission {new_notif.target_object_id} not found, skipping notification {new_notif.id}")
            continue

        # Create old notification
        OldNotification.objects.create(
            recipient=new_notif.recipient,
            actor=new_notif.actor,
            submission=submission,
            notification_type=new_notif.verb,
            message=new_notif.description,
            data=new_notif.data,
            unread=new_notif.unread,
            created_at=new_notif.timestamp,
        )


class Migration(migrations.Migration):

    dependencies = [
        ('contributions', '0029_rename_notification_related_names'),
        ('notifications', '0010_rename_notification_recipient_unread_notificatio_recipie_8bedf2_idx'),
    ]

    operations = [
        migrations.RunPython(
            migrate_notifications_forward,
            reverse_code=migrate_notifications_reverse
        ),
    ]
