# Generated by Django 5.2 on 2025-08-06 16:00

from django.db import migrations
from django.utils import timezone


def create_node_upgrade_type(apps, schema_editor):
    """
    Create the node-upgrade ContributionType and its multiplier if they don't exist.
    """
    ContributionType = apps.get_model('contributions', 'ContributionType')
    GlobalLeaderboardMultiplier = apps.get_model('leaderboard', 'GlobalLeaderboardMultiplier')
    
    # Check if node-upgrade type already exists
    contribution_type, created = ContributionType.objects.get_or_create(
        slug='node-upgrade',
        defaults={
            'name': 'Node Upgrade',
            'description': 'Points are assigned based on upgrade time',
            'min_points': 1,
            'max_points': 4
        }
    )
    
    if created:
        # Create the multiplier for this type
        GlobalLeaderboardMultiplier.objects.create(
            contribution_type=contribution_type,
            multiplier_value=10.0,
            valid_from=timezone.now(),
            description="Initial multiplier for node upgrades"
        )


def reverse_create_node_upgrade_type(apps, schema_editor):
    """
    Remove the node-upgrade ContributionType and its multiplier.
    """
    ContributionType = apps.get_model('contributions', 'ContributionType')
    GlobalLeaderboardMultiplier = apps.get_model('leaderboard', 'GlobalLeaderboardMultiplier')
    
    try:
        contribution_type = ContributionType.objects.get(slug='node-upgrade')
        # Delete associated multipliers first
        GlobalLeaderboardMultiplier.objects.filter(contribution_type=contribution_type).delete()
        # Then delete the contribution type
        contribution_type.delete()
    except ContributionType.DoesNotExist:
        pass


class Migration(migrations.Migration):

    dependencies = [
        ('contributions', '0010_populate_contribution_type_slugs'),
        ('leaderboard', '0006_alter_globalleaderboardmultiplier_multiplier_value'),
    ]

    operations = [
        migrations.RunPython(create_node_upgrade_type, reverse_create_node_upgrade_type),
    ]