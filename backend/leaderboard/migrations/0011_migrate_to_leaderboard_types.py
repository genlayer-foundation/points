# Generated by Django
from django.db import migrations

def populate_leaderboard_types(apps, schema_editor):
    """
    Migrate existing LeaderboardEntry records to use leaderboard_type field.
    Remove global entries and assign proper types based on user badges/profiles.
    """
    LeaderboardEntry = apps.get_model('leaderboard', 'LeaderboardEntry')
    Contribution = apps.get_model('contributions', 'Contribution')
    ContributionType = apps.get_model('contributions', 'ContributionType')
    
    # Try to get Validator and Builder models, but they may not exist
    try:
        Validator = apps.get_model('validators', 'Validator')
    except LookupError:
        Validator = None
    
    try:
        Builder = apps.get_model('builders', 'Builder')
    except LookupError:
        Builder = None
    
    # Process all existing entries
    for entry in LeaderboardEntry.objects.all():
        user = entry.user
        
        # Skip and delete global entries (category=None)
        if entry.category is None:
            entry.delete()
            continue
        
        # Determine the correct leaderboard type based on user's badges/profiles
        leaderboard_types = []
        
        # Check for validator-waitlist (has waitlist badge but NOT validator)
        has_waitlist = Contribution.objects.filter(
            user_id=user.id,
            contribution_type__slug='validator-waitlist'
        ).exists()
        
        has_validator = Contribution.objects.filter(
            user_id=user.id,
            contribution_type__slug='validator'
        ).exists() or (Validator and Validator.objects.filter(user_id=user.id).exists())
        
        # Check category slug to determine type
        if entry.category.slug == 'validator':
            if has_waitlist and not has_validator:
                entry.leaderboard_type = 'validator-waitlist'
            elif has_validator:
                entry.leaderboard_type = 'validator'
            else:
                # User doesn't qualify for any validator leaderboard
                entry.delete()
                continue
        elif entry.category.slug == 'builder':
            if Builder and Builder.objects.filter(user=user).exists():
                entry.leaderboard_type = 'builder'
            else:
                entry.delete()
                continue
        else:
            # Unknown category, delete
            entry.delete()
            continue
        
        entry.save()
    
    # Now create proper entries for all users based on new rules
    User = apps.get_model('users', 'User')
    
    # Check if visible field exists in the migration state
    user_fields = [f.name for f in User._meta.get_fields()]
    if 'visible' in user_fields:
        users = User.objects.filter(visible=True)
    else:
        # If visible field doesn't exist yet, process all users
        users = User.objects.all()
    
    for user in users:
        # Calculate total points
        total_points = sum(
            Contribution.objects.filter(user_id=user.id).values_list('frozen_global_points', flat=True)
        )
        
        if total_points == 0:
            continue
        
        # Check for validator-waitlist
        has_waitlist = Contribution.objects.filter(
            user_id=user.id,
            contribution_type__slug='validator-waitlist'
        ).exists()
        
        has_validator = Contribution.objects.filter(
            user_id=user.id,
            contribution_type__slug='validator'
        ).exists() or (Validator and Validator.objects.filter(user_id=user.id).exists())
        
        if has_waitlist and not has_validator:
            LeaderboardEntry.objects.update_or_create(
                user_id=user.id,
                leaderboard_type='validator-waitlist',
                defaults={'total_points': total_points}
            )
        
        if has_validator:
            LeaderboardEntry.objects.update_or_create(
                user_id=user.id,
                leaderboard_type='validator',
                defaults={'total_points': total_points}
            )
        
        if Builder and Builder.objects.filter(user_id=user.id).exists():
            LeaderboardEntry.objects.update_or_create(
                user_id=user.id,
                leaderboard_type='builder',
                defaults={'total_points': total_points}
            )

def reverse_migration(apps, schema_editor):
    """
    Reverse the migration - recreate category-based entries.
    """
    LeaderboardEntry = apps.get_model('leaderboard', 'LeaderboardEntry')
    Category = apps.get_model('contributions', 'Category')
    
    for entry in LeaderboardEntry.objects.all():
        if entry.leaderboard_type == 'validator' or entry.leaderboard_type == 'validator-waitlist':
            entry.category = Category.objects.get(slug='validator')
        elif entry.leaderboard_type == 'builder':
            entry.category = Category.objects.get(slug='builder')
        entry.save()

class Migration(migrations.Migration):

    dependencies = [
        ('leaderboard', '0010_add_leaderboard_type'),
    ]

    operations = [
        migrations.RunPython(populate_leaderboard_types, reverse_migration),
    ]